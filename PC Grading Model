{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":18647,"databundleVersionId":1126921,"sourceType":"competition"},{"sourceId":1113957,"sourceType":"datasetVersion","datasetId":624783}],"dockerImageVersionId":31011,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import os\nimport cv2\nimport numpy as np\nimport pandas as pd\nimport torch\nfrom torchvision import transforms\nfrom torch.utils.data import Dataset","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-05-07T13:32:41.471050Z","iopub.execute_input":"2025-05-07T13:32:41.471313Z","iopub.status.idle":"2025-05-07T13:32:41.475534Z","shell.execute_reply.started":"2025-05-07T13:32:41.471293Z","shell.execute_reply":"2025-05-07T13:32:41.474671Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"data = pd.read_csv('/kaggle/input/prostate-cancer-grade-assessment/train.csv')\ndata = data[data['data_provider']=='karolinska']\ncolumns = ['image_id', 'isup_grade']\ndata = data[columns]\nimage_ids = data['image_id'].to_list()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T13:35:00.869229Z","iopub.execute_input":"2025-05-07T13:35:00.869551Z","iopub.status.idle":"2025-05-07T13:35:00.893461Z","shell.execute_reply.started":"2025-05-07T13:35:00.869522Z","shell.execute_reply":"2025-05-07T13:35:00.892932Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"image_folder = '/kaggle/input/panda-16x128x128-tiles-data/train'","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T13:35:29.099890Z","iopub.execute_input":"2025-05-07T13:35:29.100151Z","iopub.status.idle":"2025-05-07T13:35:29.103813Z","shell.execute_reply.started":"2025-05-07T13:35:29.100130Z","shell.execute_reply":"2025-05-07T13:35:29.103166Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"# ImageNet normalization (used by DenseNet and most torchvision models)\nimagenet_mean = [0.485, 0.456, 0.406]\nimagenet_std = [0.229, 0.224, 0.225]\n\n# Transformation pipeline\ntransform = transforms.Compose([\n    transforms.ToPILImage(),              # convert numpy array to PIL Image\n    transforms.Resize((224, 224)),        # resize to 224x224 for DenseNet\n    transforms.ToTensor(),                # convert to tensor\n    transforms.Normalize(mean=imagenet_mean, std=imagenet_std)\n])\n\nclass PandaTileDataset(Dataset):\n    def __init__(self, df, image_dir, transform=None):\n        self.df = df\n        self.image_dir = image_dir\n        self.transform = transform\n\n    def __len__(self):\n        return len(self.df)\n\n    def __getitem__(self, idx):\n        row = self.df.iloc[idx]\n        image_id = row['image_id']\n        label = row['isup_grade']\n\n        tiles = []\n        for i in range(16):\n            tile_path = os.path.join(self.image_dir, f\"{image_id}_{i}.png\")\n            img = cv2.imread(tile_path)\n            if img is None:\n                raise FileNotFoundError(f\"Missing tile: {tile_path}\")\n            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n            tiles.append(img)\n\n        # Combine tiles into 4x4 grid\n        rows = [np.hstack(tiles[i*4:(i+1)*4]) for i in range(4)]\n        full_img = np.vstack(rows)\n\n        if self.transform:\n            full_img = self.transform(full_img)\n\n        return full_img, label","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T13:32:41.553109Z","iopub.execute_input":"2025-05-07T13:32:41.553358Z","iopub.status.idle":"2025-05-07T13:32:41.560564Z","shell.execute_reply.started":"2025-05-07T13:32:41.553336Z","shell.execute_reply":"2025-05-07T13:32:41.559964Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"data.groupby('isup_grade').size()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T13:35:04.041571Z","iopub.execute_input":"2025-05-07T13:35:04.041846Z","iopub.status.idle":"2025-05-07T13:35:04.051562Z","shell.execute_reply.started":"2025-05-07T13:35:04.041823Z","shell.execute_reply":"2025-05-07T13:35:04.050978Z"}},"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"isup_grade\n0    1925\n1    1814\n2     668\n3     317\n4     481\n5     251\ndtype: int64"},"metadata":{}}],"execution_count":14},{"cell_type":"code","source":"from torch.utils.data import DataLoader\nimage_folder = '/kaggle/input/panda-16x128x128-tiles-data/train'\ndataset = PandaTileDataset(data, image_folder, transform=transform)\ntrain_loader = DataLoader(dataset, batch_size=16, shuffle=True, num_workers=6)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T13:35:07.056092Z","iopub.execute_input":"2025-05-07T13:35:07.056884Z","iopub.status.idle":"2025-05-07T13:35:07.061449Z","shell.execute_reply.started":"2025-05-07T13:35:07.056857Z","shell.execute_reply":"2025-05-07T13:35:07.060738Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py:617: UserWarning: This DataLoader will create 6 worker processes in total. Our suggested max number of worker in current system is 4, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n  warnings.warn(\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T13:35:37.414447Z","iopub.execute_input":"2025-05-07T13:35:37.415142Z","iopub.status.idle":"2025-05-07T13:35:37.418753Z","shell.execute_reply.started":"2025-05-07T13:35:37.415116Z","shell.execute_reply":"2025-05-07T13:35:37.418024Z"}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\n# df should already have ['image_id', 'isup_grade']\ntrain_df, val_df = train_test_split(data, test_size=0.2, stratify=data['isup_grade'], random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T13:35:44.895384Z","iopub.execute_input":"2025-05-07T13:35:44.895648Z","iopub.status.idle":"2025-05-07T13:35:44.904166Z","shell.execute_reply.started":"2025-05-07T13:35:44.895626Z","shell.execute_reply":"2025-05-07T13:35:44.903455Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"# Train and validation datasets\ntrain_dataset = PandaTileDataset(train_df, image_dir=image_folder, transform=transform)\nval_dataset = PandaTileDataset(val_df, image_dir=image_folder, transform=transform)\n\n# DataLoaders\ntrain_loader = DataLoader(train_dataset, batch_size=16, shuffle=True, num_workers=2)\nval_loader = DataLoader(val_dataset, batch_size=16, shuffle=False, num_workers=2)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T13:35:46.595394Z","iopub.execute_input":"2025-05-07T13:35:46.595635Z","iopub.status.idle":"2025-05-07T13:35:46.599922Z","shell.execute_reply.started":"2025-05-07T13:35:46.595617Z","shell.execute_reply":"2025-05-07T13:35:46.599208Z"}},"outputs":[],"execution_count":20},{"cell_type":"code","source":"import torch.nn as nn\nfrom torchvision import models\n\nmodel = models.densenet121(pretrained=True)\nmodel.classifier = nn.Linear(model.classifier.in_features, 6)  # 6 classes\nmodel = model.to(device)\n\ncriterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=1e-4, weight_decay=0.01)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T13:35:48.019417Z","iopub.execute_input":"2025-05-07T13:35:48.019842Z","iopub.status.idle":"2025-05-07T13:35:48.259661Z","shell.execute_reply.started":"2025-05-07T13:35:48.019820Z","shell.execute_reply":"2025-05-07T13:35:48.259121Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=DenseNet121_Weights.IMAGENET1K_V1`. You can also use `weights=DenseNet121_Weights.DEFAULT` to get the most up-to-date weights.\n  warnings.warn(msg)\n","output_type":"stream"}],"execution_count":21},{"cell_type":"code","source":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import DataLoader\nfrom torchvision import models, transforms\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nimport pandas as pd\n\n# ---- Parameters ----\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nimage_dir = '/kaggle/input/panda-16x128x128-tiles-data/train/'  # Update if needed\nbatch_size = 16\nnum_classes = 6\n\n# ---- Transform with augmentation (optional) ----\ntransform = transforms.Compose([\n    transforms.ToPILImage(),\n    transforms.Resize((224, 224)),\n    transforms.ToTensor(),\n])\n\n# ---- Dataset and Split ----\ntrain_df, val_df = train_test_split(data, test_size=0.2, stratify=data['isup_grade'], random_state=42)\n\ntrain_dataset = PandaTileDataset(train_df, image_dir=image_folder, transform=transform)\nval_dataset = PandaTileDataset(val_df, image_dir=image_folder, transform=transform)\n\ntrain_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, num_workers=2)\nval_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False, num_workers=2)\n\n# ---- Model Setup ----\nmodel = models.densenet121(pretrained=True)\n\n# Freeze all layers initially\nfor param in model.parameters():\n    param.requires_grad = False\n\n# Replace classifier and unfreeze it\nmodel.classifier = nn.Linear(model.classifier.in_features, num_classes)\nfor param in model.classifier.parameters():\n    param.requires_grad = True\n\nmodel = model.to(device)\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=1e-4)\nscheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='max', factor=0.5, patience=1, verbose=True)\n\n# ---- Training Loop ----\nfor epoch in range(5):\n    model.train()\n    total_train_loss = 0\n\n    for inputs, labels in train_loader:\n        inputs, labels = inputs.to(device), labels.to(device)\n\n        optimizer.zero_grad()\n        outputs = model(inputs)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n\n        total_train_loss += loss.item()\n\n    avg_train_loss = total_train_loss / len(train_loader)\n\n    # ---- Validation ----\n    model.eval()\n    all_preds = []\n    all_targets = []\n\n    with torch.no_grad():\n        for inputs, labels in val_loader:\n            inputs, labels = inputs.to(device), labels.to(device)\n            outputs = model(inputs)\n            preds = torch.argmax(outputs, dim=1)\n\n            all_preds.extend(preds.cpu().numpy())\n            all_targets.extend(labels.cpu().numpy())\n\n    val_acc = accuracy_score(all_targets, all_preds)\n    scheduler.step(val_acc)\n\n    print(f\"Epoch {epoch+1}: Train Loss = {avg_train_loss:.4f} | Val Acc = {val_acc:.4f} | LR = {optimizer.param_groups[0]['lr']:.6f}\")\n\n    # ---- Gradual Unfreezing after Epoch 2 ----\n    if epoch == 1:\n        for name, param in model.named_parameters():\n            if 'denseblock4' in name or 'transition3' in name:\n                param.requires_grad = True\n        optimizer = optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=1e-5)\n        print(\"🔓 Unfroze denseblock4 and transition3\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T13:35:50.968161Z","iopub.execute_input":"2025-05-07T13:35:50.968723Z","iopub.status.idle":"2025-05-07T13:44:35.614205Z","shell.execute_reply.started":"2025-05-07T13:35:50.968699Z","shell.execute_reply":"2025-05-07T13:44:35.613258Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n  warnings.warn(\n/usr/local/lib/python3.11/dist-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=DenseNet121_Weights.IMAGENET1K_V1`. You can also use `weights=DenseNet121_Weights.DEFAULT` to get the most up-to-date weights.\n  warnings.warn(msg)\n/usr/local/lib/python3.11/dist-packages/torch/optim/lr_scheduler.py:62: UserWarning: The verbose parameter is deprecated. Please use get_last_lr() to access the learning rate.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"Epoch 1: Train Loss = 1.5288 | Val Acc = 0.3800 | LR = 0.000100\nEpoch 2: Train Loss = 1.4618 | Val Acc = 0.4093 | LR = 0.000100\n🔓 Unfroze denseblock4 and transition3\nEpoch 3: Train Loss = 1.4098 | Val Acc = 0.4451 | LR = 0.000010\nEpoch 4: Train Loss = 1.3323 | Val Acc = 0.4625 | LR = 0.000010\nEpoch 5: Train Loss = 1.2821 | Val Acc = 0.4698 | LR = 0.000010\n","output_type":"stream"}],"execution_count":22},{"cell_type":"code","source":"# Save model weights\ntorch.save(model.state_dict(), 'densenet121_isup.pth')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T13:44:35.615773Z","iopub.execute_input":"2025-05-07T13:44:35.616014Z","iopub.status.idle":"2025-05-07T13:44:35.715764Z","shell.execute_reply.started":"2025-05-07T13:44:35.615993Z","shell.execute_reply":"2025-05-07T13:44:35.715216Z"}},"outputs":[],"execution_count":23},{"cell_type":"code","source":"from IPython.display import FileLink\nFileLink('/kaggle/working/densenet121_isup.pth')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T13:44:35.716474Z","iopub.execute_input":"2025-05-07T13:44:35.716726Z","iopub.status.idle":"2025-05-07T13:44:35.722066Z","shell.execute_reply.started":"2025-05-07T13:44:35.716701Z","shell.execute_reply":"2025-05-07T13:44:35.721510Z"}},"outputs":[{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"/kaggle/working/densenet121_isup.pth","text/html":"<a href='/kaggle/working/densenet121_isup.pth' target='_blank'>/kaggle/working/densenet121_isup.pth</a><br>"},"metadata":{}}],"execution_count":24},{"cell_type":"code","source":"# Git config\n!git config --global user.name \"IR04dy\"\n!git config --global user.email \"yousefroshdy51@gmail.com\"\n\n# Setup\nimport os\nGITHUB_TOKEN = \"ghp_XXXXXXXXXXXXXXXXXXXXXXXXXXXX\"  # replace with your token\nREPO = \"IR04dy/ProstateCancerDetection\"\n\n# Clone\nrepo_url = f\"https://{GITHUB_TOKEN}@github.com/{REPO}.git\"\n!rm -rf ProstateCancerDetection\n!git clone {repo_url}\n\n# Copy model\n!cp /kaggle/working/densenet121_isup.pth ProstateCancerDetection/\n\n# Commit\n%cd ProstateCancerDetection\n!git add densenet121_isup.pth\n!git commit -m \"Add trained DenseNet121 model\" || echo \"Nothing to commit\"\n\n# Force set token in remote and push\n!git remote set-url origin https://{GITHUB_TOKEN}@github.com/{REPO}.git\n!git push origin main\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T14:34:48.522589Z","iopub.execute_input":"2025-05-07T14:34:48.522900Z","iopub.status.idle":"2025-05-07T14:43:36.633415Z","shell.execute_reply.started":"2025-05-07T14:34:48.522873Z","shell.execute_reply":"2025-05-07T14:43:36.632446Z"}},"outputs":[{"name":"stdout","text":"Cloning into 'ProstateCancerDetection'...\nwarning: You appear to have cloned an empty repository.\n/kaggle/working/ProstateCancerDetection/ProstateCancerDetection/ProstateCancerDetection\n[main (root-commit) 9342cfe] Add trained DenseNet121 model\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 densenet121_isup.pth\nPassword for 'https://ghp_XXXXXXXXXXXXXXXXXXXXXXXXXXXX@github.com': ","output_type":"stream"}],"execution_count":28},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}